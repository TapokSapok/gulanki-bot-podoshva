import { eventT, EventType } from '../schema/event';
export declare function createEvent(data: typeof eventT.$inferInsert): Promise<{
    id: number;
    createdAt: Date;
    userId: number;
    description: string;
    profileId: number;
    publicChannelId: number;
    moderateChannelId: number;
    publicMessageId: number | null;
    publicChannelUsername: string | null;
    isApproved: boolean;
    isRejected: boolean;
    zone: string;
    responses: number;
    location: string | null;
    eventDate: Date;
}>;
export declare function getEventById(id: number): Promise<{
    event: {
        id: number;
        profileId: number;
        userId: number;
        publicChannelId: number;
        moderateChannelId: number;
        publicMessageId: number | null;
        publicChannelUsername: string | null;
        isApproved: boolean;
        isRejected: boolean;
        description: string;
        zone: string;
        responses: number;
        location: string | null;
        eventDate: Date;
        createdAt: Date;
    };
    user: {
        id: number;
        tg_id: number;
        username: string | null;
        firstName: string | null;
        karma: number;
        role: import("../schema/user").Role;
        isBanned: boolean;
        createdAt: Date;
    } | null;
    profile: {
        id: number;
        userId: number;
        name: string;
        age: number;
        photo: string[];
        city: string;
        aboutMe: string | null;
        createdAt: Date;
    } | null;
}>;
export declare function getEventByUserIdWithNotModerated(userId: number): Promise<{
    id: number;
    profileId: number;
    userId: number;
    publicChannelId: number;
    moderateChannelId: number;
    publicMessageId: number | null;
    publicChannelUsername: string | null;
    isApproved: boolean;
    isRejected: boolean;
    description: string;
    zone: string;
    responses: number;
    location: string | null;
    eventDate: Date;
    createdAt: Date;
}>;
export declare function updateEvent(id: number, data: Partial<EventType>): Promise<{
    id: number;
    profileId: number;
    userId: number;
    publicChannelId: number;
    moderateChannelId: number;
    publicMessageId: number | null;
    publicChannelUsername: string | null;
    isApproved: boolean;
    isRejected: boolean;
    description: string;
    zone: string;
    responses: number;
    location: string | null;
    eventDate: Date;
    createdAt: Date;
}>;
