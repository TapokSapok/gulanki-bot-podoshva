import { Scenes } from 'telegraf';
import { Scene } from '../../../types/enums';
import asyncWrapper from '../../../utils/async-wrapper';
import { WizardContext } from 'telegraf/typings/scenes';
import { cancelButton, chunkArray, errEmoji, isValidDateFormat, parseArgs } from '../../../utils';
import { menuAction } from '../../base/action';
import { FatalError, ValidateError } from '../../../utils/errors';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import { createEvent, getEventByUserIdWithNotModerated } from '../../../db/repository/event';
import { getUserByTgId, getUserByTgIdWithProfile } from '../../../db/repository/user';
import { getCityByName } from '../../../db/repository/city';
import { bot } from '../../../bot';
import dayjs from 'dayjs';
import { eventModerateMessage } from '../message';
import { menuMessage } from '../../base/message';

const eventDays = [
	{
		text: '–°–µ–≥–æ–¥–Ω—è',
		callback_data: 'select_date:0',
	},
	{
		text: '–ó–∞–≤—Ç—Ä–∞',
		callback_data: 'select_date:1',
	},
	{
		text: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞',
		callback_data: 'select_date:2',
	},
];

const messages = {
	typeEventDescription: async (ctx: WizardContext) =>
		ctx.reply('üìå –£–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ:\n\n<i>* –ß–µ–º –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —Ü–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏.</i>', { parse_mode: 'HTML', reply_markup: { inline_keyboard: [cancelButton] } }),
	typeZone: async (ctx: WizardContext) =>
		ctx.reply('‚ÑπÔ∏è –£–∫–∞–∂–∏ —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∞', { parse_mode: 'HTML', reply_markup: { inline_keyboard: [cancelButton] } }),
	typeLocation: async (ctx: WizardContext) =>
		ctx.reply('‚ÑπÔ∏è –£–∫–∞–∂–∏ —Ç–æ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∞\n\n<i>* –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ –≤ –ª—Å —Ç–æ–º—É, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É.</i>', {
			parse_mode: 'HTML',
			reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip' }], cancelButton] },
		}),
	selectEventDate: async (ctx: WizardContext) =>
		ctx.reply('üå† –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–∞–º –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏:\n\n<i>* –ü—Ä–∏–º–µ—Ä: 22.02</i>', {
			parse_mode: 'HTML',
			reply_markup: { inline_keyboard: [...chunkArray(eventDays, 2), cancelButton] },
		}),
	selectEventTime: async (ctx: WizardContext) =>
		ctx.reply('üï∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:\n\n<i>* –ü—Ä–∏–º–µ—Ä: 17:50</i>', { parse_mode: 'HTML', reply_markup: { inline_keyboard: [cancelButton] } }),
	eventCreated: async (ctx: WizardContext) => ctx.reply('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!'),
};

export const createEventScene = new Scenes.WizardScene<WizardContext>(
	Scene.create_event,
	asyncWrapper(async ctx => {
		if (ctx.callbackQuery) await ctx.answerCbQuery();

		const user = await getUserByTgId(ctx.from!.id);
		if (!user) throw new FatalError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω', true, true);

		const eventExists = await getEventByUserIdWithNotModerated(user.id);
		if (eventExists) {
			await ctx.reply(`${errEmoji} –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏`);
			return menuAction(ctx, true);
		}

		await messages.typeEventDescription(ctx);
		return ctx.wizard.next();
	}),
	asyncWrapper(async ctx => {
		const desc = ctx.text?.trim();
		if (!desc) throw new ValidateError('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ');
		else if (desc.length < 5) throw new ValidateError('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 5 —Å–∏–º–≤–æ–ª–æ–≤');
		else if (desc.length > 256) throw new ValidateError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 256 —Å–∏–º–≤–æ–ª–æ–≤');

		(ctx.scene.state as any).description = desc;

		await messages.typeZone(ctx);
		return ctx.wizard.next();
	}),
	asyncWrapper(async ctx => {
		const text = ctx.text?.trim();
		if (!text) throw new ValidateError('–£–∫–∞–∂–∏ —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∞');
		else if (text.length < 2) throw new ValidateError('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 2 —Å–∏–º–≤–æ–ª–∞');
		else if (text.length > 16) throw new ValidateError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤');

		(ctx.scene.state as any).zone = text;

		await messages.typeLocation(ctx);
		return ctx.wizard.next();
	}),
	asyncWrapper(async ctx => {
		if (ctx.callbackQuery) await ctx.answerCbQuery();
		const text = ctx.text?.trim();
		const callbackData = (ctx?.callbackQuery as CallbackQuery.DataQuery)?.data;

		if (!text && callbackData !== 'skip') throw new ValidateError('–£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏');
		else if (!callbackData && text && text.length < 2) throw new ValidateError('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 2 —Å–∏–º–≤–æ–ª–∞');
		else if (!callbackData && text && text.length > 32) throw new ValidateError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 32 —Å–∏–º–≤–æ–ª–∞');

		(ctx.scene.state as any).location = callbackData === 'skip' ? null : text;

		await messages.selectEventDate(ctx);
		return ctx.wizard.next();
	}),
	asyncWrapper(async ctx => {
		if (ctx.callbackQuery) await ctx.answerCbQuery();

		const text = ctx.text?.trim() || '';

		let [_, plusDay] = parseArgs(ctx);
		let date: Date | null = null;
		if (plusDay || plusDay === 0) {
			date = new Date();
			date.setDate(date.getDate() + plusDay);
		} else {
			if (!isValidDateFormat(text)) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
			const [day, month] = text.split('.').map(Number);
			if (!day || !month) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');

			date = new Date();
			date = new Date(date.getFullYear(), Math.floor(month) - 1, Math.floor(day));

			if (date.getTime() < Date.now()) throw new ValidateError('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
		}

		(ctx.scene.state as any).date = date;

		await messages.selectEventTime(ctx);
		return ctx.wizard.next();
	}),
	asyncWrapper(async ctx => {
		if (ctx.callbackQuery) await ctx.answerCbQuery();
		const text = ctx.text?.trim();
		if (!text) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');

		const [hour, minute] = text.split(':').map(Number);
		if ((!hour && hour !== 0) || (!minute && minute !== 0)) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
		else if (hour < 0 || hour > 23) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
		else if (minute < 0 || minute > 59) throw new ValidateError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');

		let date = (ctx.scene.state as any).date as Date;
		date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour, minute, 0, 0);

		if (date.getTime() < new Date().getTime()) throw new ValidateError('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');

		(ctx.scene.state as any).date = date;

		const { user, profile } = await getUserByTgIdWithProfile(ctx.from!.id);
		if (!user || !profile) throw new FatalError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã', true, true);

		const city = await getCityByName(profile.city);
		if (!city) throw new FatalError('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω', true, true);

		const event = await createEvent({
			description: (ctx.scene.state as any).description as string,
			eventDate: (ctx.scene.state as any).date as Date,
			userId: user.id,
			profileId: profile.id,
			zone: (ctx.scene.state as any).zone as string,
			location: (ctx.scene.state as any).location as string,
			publicChannelId: city.publicChannelId,
			moderateChannelId: city.moderateChannelId,
		});

		if (!event) throw new FatalError('–°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ', true, true);

		await eventModerateMessage(user, profile, event);

		console.log(event);

		await messages.eventCreated(ctx);
		await menuAction(ctx, true);
		return ctx.scene.leave();
	})
);
