import { Context } from 'telegraf';
import { createUser, getUserByTgIdWithProfile } from '../db/repository/user';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import { FatalError } from '../utils/errors';

export default async function authMiddleware(ctx: Context, next: Function) {
	if (!ctx.from) return next();

	try {
		if (!ctx.from.username) throw new FatalError('–ß—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥!', true, true);

		let { user, profile } = await getUserByTgIdWithProfile(ctx.from.id);

		if (!user) {
			user = await createUser({ tg_id: ctx.from.id, username: ctx.from.username, firstName: ctx.from.first_name });
		}

		if (user.isBanned) {
			return await ctx.reply('üö´ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, —Å–æ—Å–∏ –∂–∏—Ä–Ω—ã–π —á–ª–µ–Ω');
		}

		if (!profile) {
			if ((ctx?.callbackQuery as CallbackQuery.DataQuery)?.data === 'create_profile') return next();

			return await ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è üëã', {
				reply_markup: { inline_keyboard: [[{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'create_profile' }]] },
			});
		}

		next();
	} catch (error) {
		console.error(error);
	}
}
